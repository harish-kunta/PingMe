(function () {
  /*global describe, it*/

  'use strict';

  var should = require('should'),
    express = require('express'),
    supertest = require('supertest'),
    bodyParser = require('body-parser'),
    cors = require('../lib');

  var dynamicOrigin,
    app1,
    app2,
    text = 'I am a free style android developer ,Please provide your valuable feedback to make this app useful' ;

  /* -------------------------------------------------------------------------- */

  dynamicOrigin = function (origin, cb) {
    setTimeout(function () {
      cb(null, true);
    }, 200);
  };

  /* -------------------------------------------------------------------------- */

  app1 = express();
  app1.use(cors({origin: dynamicOrigin}));
  app1.use(bodyParser.json());
  app1.post('/', function (req, res) {
    res.send(req.body);
  });

  /* -------------------------------------------------------------------------- */

  app2 = express();
  app2.use(bodyParser.json());
  app2.use(cors({origin: dynamicOrigin}));
  app2.post('/', function (req, res) {
    res.send(req.body);
  });

  /* -------------------------------------------------------------------------- */

  describe('body-parser-events', function () {
    describe('app1 (cors before bodyparser)', function () {
      it('POST works', function (done) {
        var body = {
          example: text
        };
        supertest(app1)
          .post('/')
          .send(body)
          .expect(200)
          .end(function (err, res) {
            should.not.exist(err);
            res.body.should.eql(body);
            done();
          });
      });
    });

    describe('app2 (bodyparser before cors)', function () {
      it('POST works', function (done) {
        var body = {
          example: text
        };
        supertest(app2)
          .post('/')
          .send(body)
          .expect(200)
          .end(function (err, res) {
            should.not.exist(err);
            res.body.should.eql(body);
            done();
          });
      });
    });
  });

}());
